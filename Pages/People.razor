@page "/people"

<PageTitle>People</PageTitle>

@using BlazorServer.Models;
@using DataLibrary
@inject IDataAccess _data
@inject IConfiguration _config

<h3>People</h3>

<input placeholder="Please enter first name" @bind="@value" />
<input placeholder="Please enter last name" @bind="@value2" />

@*<input @bind="" placeholder="Please enter last name" />*@
<button class="btn btn-primary" style="margin-bottom: 5px;" @onclick="InsertData(value, value2)">Insert data</button>
<button class="btn btn-warning" style="margin-bottom: 5px;" @onclick="UpdateData">Update data</button>
<button class="btn btn-danger" style="margin-bottom: 5px;" @onclick="DeleteData">Delete data</button>


@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var p in people)
    {
        <p>
            <span style="border-radius: 5px; padding: 5px; margin-top: 10px; background-color: gray; color: white">@p.FirstName | @p.LastName</span>
        </p>
    }
}

@code {
    List<PersonModel> people;
    public string value;
    public string value2;


    private async Task InsertData(string fistName, string lastName)
    {
        string sql = "insert into people (FirstName, LastName) value (@FirstName, @LastName);";
        await _data.SaveData(sql, new { FirstName = fistName, LastName = lastName }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    private async Task UpdateData()
    {
        string sql = "update people set FirstName = @FirstName where LastName = @LastName";
        await _data.SaveData(sql, new { FirstName = "Beha", LastName = "Kamol" }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    private async Task DeleteData()
    {
        string sql = "delete from people where FirstName = @FirstName";
        await _data.SaveData(sql, new { FirstName = "Uktam" }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from people";
        people = await _data.LoadData<PersonModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }
}
